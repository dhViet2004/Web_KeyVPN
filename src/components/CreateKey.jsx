import { useState, useEffect } from 'react'
import { PlusOutlined, DeleteOutlined, FileTextOutlined, SearchOutlined, UserOutlined, UnorderedListOutlined, ReloadOutlined, RetweetOutlined, SwapOutlined } from '@ant-design/icons'
import { Button, Input, Select, Table, Radio, Space, Typography, Divider, Form, Tabs, Modal, App, Spin, Alert, Popconfirm } from 'antd'
import { useSettings } from '../hooks/useSettings'
import { useKeys } from '../hooks/useKeys'
import { keysAPI, accountsAPI } from '../services/api'

const { Title } = Typography
const { Option } = Select


const keyGroups = [
  { label: 'FBX', value: 'FBX' },
  { label: 'THX', value: 'THX' },
  { label: 'CTV', value: 'CTV' },
  { label: 'TEST', value: 'TEST' },
]

const keyTypeOptions = [
  { value: '3key', label: '3 key/1 t√†i kho·∫£n' },
  { value: '2key', label: '2 key/1 t√†i kho·∫£n' },
  { value: '1key', label: '1 key/1 t√†i kho·∫£n' },
]

const CreateKey = () => {
  const { message: messageApi } = App.useApp()
  const { settings } = useSettings()
  const [activeGroup, setActiveGroup] = useState('FBX')
  const { keys, createKeys, deleteKey, setKeys, fetchKeys } = useKeys(activeGroup)
  const [allKeys, setAllKeys] = useState([]) // Store all keys for filtering
  const [days, setDays] = useState(30)
  const [customDays, setCustomDays] = useState('')
  const [type, setType] = useState('2key')
  const [amount, setAmount] = useState(1)
  const [customer, setCustomer] = useState('')
  const [search, setSearch] = useState('')
  const [selectAll, setSelectAll] = useState(false)
  const [isModalOpen, setIsModalOpen] = useState(false)
  const [isFilterModalOpen, setIsFilterModalOpen] = useState(false)
  const [selectedKeyGroup, setSelectedKeyGroup] = useState('')
  const [selectedStatus, setSelectedStatus] = useState('')
  const [filteredKeysForDelete, setFilteredKeysForDelete] = useState([])
  const [selectedKeysForDelete, setSelectedKeysForDelete] = useState([])
  const [selectAllForDelete, setSelectAllForDelete] = useState(false)
  const [form] = Form.useForm()

  // States for assign key modal
  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false)
  const [currentKeyForAssign, setCurrentKeyForAssign] = useState(null)
  const [accounts, setAccounts] = useState([])
  const [loadingAccounts, setLoadingAccounts] = useState(false)
  const [selectedAccountId, setSelectedAccountId] = useState(null)
  const [justAssignedKey, setJustAssignedKey] = useState(false) // Track if key was just assigned
  const [tableKey, setTableKey] = useState(0) // Force table re-render

  // States for transfer key modal
  const [isTransferModalOpen, setIsTransferModalOpen] = useState(false)
  const [currentKeyForTransfer, setCurrentKeyForTransfer] = useState(null)
  const [transferAccounts, setTransferAccounts] = useState([])
  const [loadingTransferAccounts, setLoadingTransferAccounts] = useState(false)
  const [selectedTransferAccountId, setSelectedTransferAccountId] = useState(null)

  // Fetch all keys for filtering purpose
  const fetchAllKeys = async () => {
    try {
      const allKeysData = []
      for (const group of keyGroups) {
        console.log(`üîç Fetching keys for group: ${group.value}`)
        const response = await keysAPI.getKeys(group.value)
        console.log(`üìä Response for ${group.value}:`, response)
        
        if (response.success && response.data) {
          // Check if response.data has keys array
          if (Array.isArray(response.data.keys)) {
            console.log(`‚úÖ Found ${response.data.keys.length} keys for ${group.value}`)
            allKeysData.push(...response.data.keys)
          } else if (Array.isArray(response.data)) {
            // Sometimes data might be directly an array
            console.log(`‚úÖ Found ${response.data.length} keys for ${group.value} (direct array)`)
            allKeysData.push(...response.data)
          } else {
            console.log(`‚ö†Ô∏è Unexpected data structure for ${group.value}:`, response.data)
          }
        } else {
          console.log(`‚ö†Ô∏è No keys found for ${group.value}:`, response)
        }
      }
      console.log(`üéØ Total keys fetched: ${allKeysData.length}`)
      setAllKeys(allKeysData)
    } catch (error) {
      console.error('‚ùå Error fetching all keys:', error)
    }
  }

  // Load all keys when component mounts
  useEffect(() => {
    fetchAllKeys()
  }, [])

  // Refresh keys when the component becomes visible (e.g., when user switches tabs)
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        fetchAllKeys()
        fetchKeys(activeGroup)
      }
    }

    document.addEventListener('visibilitychange', handleVisibilityChange)
    return () => {
      document.removeEventListener('visibilitychange', handleVisibilityChange)
    }
  }, [activeGroup, fetchKeys])

  // Manual refresh function
  const handleRefresh = async () => {
    try {
      await fetchAllKeys()
      await fetchKeys(activeGroup)
      messageApi.success('ƒê√£ c·∫≠p nh·∫≠t danh s√°ch key!')
    } catch (error) {
      messageApi.error('L·ªói c·∫≠p nh·∫≠t: ' + (error.message || error))
    }
  }

  // T·∫°o key m·ªõi
  const handleCreate = async () => {
    try {
      const n = Math.max(1, parseInt(amount) || 1)
      const time = activeGroup === 'TEST' ? 2 : (customDays ? parseInt(customDays) : days)
      
      const keyData = {
        group: activeGroup,
        count: n,
        days: time,
        type,
        customer: customer || '',
      }
      
      await createKeys(keyData)
      await fetchKeys(activeGroup)
      await fetchAllKeys()
      messageApi.success(`ƒê√£ t·∫°o ${n} key m·ªõi cho nh√≥m ${activeGroup}!`)
      setIsModalOpen(false)
      
      // Reset form
      setDays(30)
      setCustomDays('')
      setType('2key')
      setAmount(1)
      setCustomer('')
      form.resetFields()
    } catch (error) {
      messageApi.error(`L·ªói t·∫°o key: ${error.message}`)
    }
  }

  // T·∫°o key v√† xu·∫•t file txt
  const handleCreateAndExport = async () => {
    try {
      const n = Math.max(1, parseInt(amount) || 1)
      const time = activeGroup === 'TEST' ? 2 : (customDays ? parseInt(customDays) : days)
      
      const keyData = {
        group: activeGroup,
        count: n,
        days: time,
        type,
        customer: customer || '',
      }
      
      const response = await createKeys(keyData)
      await fetchKeys(activeGroup)
      await fetchAllKeys()
      
      // Xu·∫•t file txt v·ªõi keys m·ªõi ƒë∆∞·ª£c t·∫°o
      const newKeys = response.data || []
      const fileName = `${activeGroup}${customDays || time}ngay.txt`
      const linkTemplate = settings.keyExport?.linkTemplate || 'link nh·∫≠p key:'
      const content = newKeys.map(k => `${k.code} | ${linkTemplate}`).join('\n')
      const blob = new Blob([content], { type: 'text/plain' })
      const link = document.createElement('a')
      link.href = URL.createObjectURL(blob)
      link.download = fileName
      link.click()
      
      messageApi.success(`ƒê√£ t·∫°o ${n} key m·ªõi v√† xu·∫•t file ${fileName}!`)
      setIsModalOpen(false)
      
      // Reset form
      setDays(30)
      setCustomDays('')
      setType('2key')
      setAmount(1)
      setCustomer('')
      form.resetFields()
    } catch (error) {
      messageApi.error(`L·ªói t·∫°o key: ${error.message}`)
    }
  }

  // M·ªü modal t·∫°o key
  const showCreateModal = () => {
    setIsModalOpen(true)
    form.setFieldsValue({
      days: activeGroup === 'TEST' ? 2 : days,
      customDays,
      type,
      amount,
      customer
    })
  }

  // ƒê√≥ng modal
  const handleCancel = () => {
    setIsModalOpen(false)
  }

  // M·ªü modal l·ªçc x√≥a
  const showFilterModal = () => {
    setIsFilterModalOpen(true)
    setSelectedKeyGroup('')
    setSelectedStatus('')
  }

  // ƒê√≥ng modal l·ªçc
  const handleFilterCancel = () => {
    setIsFilterModalOpen(false)
    setSelectedKeyGroup('')
    setSelectedStatus('')
    setFilteredKeysForDelete([])
    setSelectedKeysForDelete([])
    setSelectAllForDelete(false)
  }

  // X√≥a key theo b·ªô l·ªçc
  const handleFilterDelete = async () => {
    try {
      // X√≥a c√°c key ƒë∆∞·ª£c ch·ªçn ho·∫∑c t·∫•t c·∫£ key ƒë∆∞·ª£c l·ªçc
      const keysToDelete = selectedKeysForDelete.length > 0 ? selectedKeysForDelete : filteredKeysForDelete
      const deletedCount = keysToDelete.length
      
      // G·ªçi API ƒë·ªÉ x√≥a t·ª´ng key
      for (const key of keysToDelete) {
        await deleteKey(key.id)
      }
      
      // Refresh both current group keys and all keys
      await fetchKeys(activeGroup)
      await fetchAllKeys()
      
      messageApi.success(`ƒê√£ x√≥a ${deletedCount} key!`)
      setIsFilterModalOpen(false)
      setSelectedKeyGroup('')
      setSelectedStatus('')
      setFilteredKeysForDelete([])
      setSelectedKeysForDelete([])
      setSelectAllForDelete(false)
    } catch (error) {
      messageApi.error(`L·ªói x√≥a key: ${error.message}`)
    }
  }

  // L·ªçc key khi thay ƒë·ªïi nh√≥m key
  const handleKeyGroupChange = (group) => {
    const newGroup = selectedKeyGroup === group ? '' : group
    setSelectedKeyGroup(newGroup)
    setSelectedStatus('')
    setFilteredKeysForDelete([])
    setSelectedKeysForDelete([])
    setSelectAllForDelete(false)
  }

  // L·ªçc key khi thay ƒë·ªïi tr·∫°ng th√°i
  const handleStatusChange = (status) => {
    const newStatus = selectedStatus === status ? '' : status
    setSelectedStatus(newStatus)
    setSelectedKeysForDelete([])
    setSelectAllForDelete(false)
    
    if (selectedKeyGroup && newStatus) {
      let statusFilter = newStatus
      if (newStatus === 'h·∫øt h·∫°n') {
        statusFilter = 'h·∫øt h·∫°n'
      } else if (newStatus === 'c√≤n h·∫°n') {
        statusFilter = 'ƒëang ho·∫°t ƒë·ªông'
      } else if (newStatus === 'ch∆∞a g√°n t√†i kho·∫£n') {
        statusFilter = 'ch·ªù'
      }
      
      const filtered = allKeys.filter(k => 
        k.group === selectedKeyGroup && k.status === statusFilter
      )
      setFilteredKeysForDelete(filtered)
    } else {
      setFilteredKeysForDelete([])
    }
  }

  // Ch·ªçn key ƒë·ªÉ x√≥a
  const handleSelectKeyForDelete = (keyId) => {
    const isSelected = selectedKeysForDelete.some(k => k.id === keyId)
    if (isSelected) {
      setSelectedKeysForDelete(selectedKeysForDelete.filter(k => k.id !== keyId))
    } else {
      const keyToAdd = filteredKeysForDelete.find(k => k.id === keyId)
      if (keyToAdd) {
        setSelectedKeysForDelete([...selectedKeysForDelete, keyToAdd])
      }
    }
  }

  // Ch·ªçn t·∫•t c·∫£ key ƒë·ªÉ x√≥a
  const handleSelectAllForDelete = () => {
    if (selectAllForDelete) {
      setSelectedKeysForDelete([])
    } else {
      setSelectedKeysForDelete([...filteredKeysForDelete])
    }
    setSelectAllForDelete(!selectAllForDelete)
  }

  // Ch·ªçn/x√≥a key
  const handleSelect = id => setKeys(keys.map(k => k.id === id ? { ...k, selected: !k.selected } : k))
  const handleSelectAll = () => {
    setSelectAll(!selectAll)
    setKeys(keys.map(k => k.group === activeGroup ? { ...k, selected: !selectAll } : k))
  }
  const handleDeleteAccount = async id => {
    try {
      await deleteKey(id);
      await fetchKeys(activeGroup);
      await fetchAllKeys();
      messageApi.success('ƒê√£ x√≥a key th√†nh c√¥ng!');
    } catch (error) {
      messageApi.error('L·ªói x√≥a key: ' + (error.message || error));
    }
  }

  // Functions for assign key modal
  const showAssignModal = async (key) => {
    // Ki·ªÉm tra tr·∫°ng th√°i key tr∆∞·ªõc khi m·ªü modal
    if (key.status !== 'ch·ªù') {
      messageApi.warning(`Key ${key.code} kh√¥ng th·ªÉ g√°n v√¨ ƒëang ·ªü tr·∫°ng th√°i: ${key.status}. Ch·ªâ c√≥ th·ªÉ g√°n key c√≥ tr·∫°ng th√°i "ch·ªù".`)
      return
    }

    // Set key data first, then fetch accounts to ensure correct key type is used
    setCurrentKeyForAssign(key)
    setIsAssignModalOpen(true)
    setSelectedAccountId(null)
    setJustAssignedKey(false) // Reset success state when opening modal for new key
    
    // Always fetch fresh data to ensure accurate key counts
    // Kh√¥ng s·ª≠ d·ª•ng cached data t·ª´ database query ƒë·ªÉ ƒë·∫£m b·∫£o s·ªë li·ªáu ch√≠nh x√°c
    await fetchAccountsWithSlots(key);
  }

  const handleAssignCancel = () => {
    setIsAssignModalOpen(false)
    setCurrentKeyForAssign(null)
    setSelectedAccountId(null)
    setAccounts([])
    setJustAssignedKey(false) // Reset assign success state
    setTableKey(0) // Reset table key
  }

  const fetchAccountsWithSlots = async (keyForAssign = null) => {
    try {
      setLoadingAccounts(true)
      const response = await accountsAPI.getAccounts()
      if (response.success && response.data && Array.isArray(response.data.accounts)) {
        console.log('üîç Raw accounts data from API:', response.data.accounts.slice(0, 2)) // Debug log
        
        // Filter accounts based on key type and dynamic slot limits
        // Use the passed key parameter if available, otherwise use the current state
        const keyToAssign = keyForAssign || currentKeyForAssign;
        const keyType = keyToAssign?.key_type || keyToAssign?.type || '2key';
        
        console.log('üîç Key type for filtering accounts:', keyType, 'Key data:', keyToAssign)
        
        const accountsWithSlots = response.data.accounts.filter(account => {
          // Map backend field names to frontend expected names
          const currentKeys = account.key_count || account.current_key_count || 0; // Backend uses 'key_count'
          const currentMaxSlots = account.max_key_slots || account.max_keys || 3; // Backend might use 'max_keys'
          
          console.log(`üîç Account ${account.username}: key_count=${account.key_count}, current_key_count=${account.current_key_count}, max_keys=${account.max_keys}, dominant_key_type=${account.dominant_key_type}`)
          
          // Check key type restrictions first
          let isCompatible = true;
          if (account.key_type_restrictions && account.key_type_restrictions !== '') {
            isCompatible = account.key_type_restrictions === keyType;
          }
          
          if (!isCompatible) {
            console.log(`‚ùå Account ${account.username} not compatible with ${keyType} (restricted to ${account.key_type_restrictions})`);
            return false;
          }
          
          // Apply specific filtering logic based on key type
          if (keyType === '1key') {
            // 1key/t√†i kho·∫£n: Ch·ªâ hi·ªÉn th·ªã t√†i kho·∫£n tr·ªëng (0/3 slot)
            const isEmpty = currentKeys === 0;
            if (!isEmpty) {
              console.log(`‚ùå Account ${account.username} has ${currentKeys} keys, not suitable for 1key (needs empty account)`);
            }
            return isEmpty;
            
          } else if (keyType === '2key') {
            // 2key/t√†i kho·∫£n: Hi·ªÉn th·ªã t√†i kho·∫£n tr·ªëng (0/3) ho·∫∑c ƒë√£ c√≥ 1 key lo·∫°i 2key
            const isEmpty = currentKeys === 0;
            const hasOne2Key = currentKeys === 1 && (account.dominant_key_type === '2key' || currentMaxSlots === 2);
            
            if (!isEmpty && !hasOne2Key) {
              console.log(`‚ùå Account ${account.username} has ${currentKeys} keys (type: ${account.dominant_key_type}), not suitable for 2key`);
            }
            return isEmpty || hasOne2Key;
            
          } else if (keyType === '3key') {
            // 3key/t√†i kho·∫£n: Ch·ªâ hi·ªÉn th·ªã t√†i kho·∫£n ch∆∞a g√°n key HO·∫∂C ƒë√£ g√°n key lo·∫°i 3key
            // Kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã t√†i kho·∫£n ƒë√£ g√°n key lo·∫°i 2key ƒë·ªÉ tr√°nh xung ƒë·ªôt slot
            const projectedMaxSlots = 3; // 3key lu√¥n c√≥ slot = 3
            const hasSlots = currentKeys < projectedMaxSlots;
            
            // Ki·ªÉm tra lo·∫°i key dominat n·∫øu t√†i kho·∫£n ƒë√£ c√≥ key
            if (currentKeys > 0) {
              const dominantKeyType = account.dominant_key_type;
              
              // N·∫øu t√†i kho·∫£n ƒë√£ c√≥ key lo·∫°i 2key, kh√¥ng cho ph√©p g√°n 3key
              if (dominantKeyType === '2key') {
                console.log(`‚ùå Account ${account.username} has ${currentKeys} keys of type ${dominantKeyType}, cannot assign 3key to avoid slot conflict`);
                return false;
              }
              
              // N·∫øu t√†i kho·∫£n ƒë√£ c√≥ key lo·∫°i 1key, kh√¥ng cho ph√©p g√°n 3key  
              if (dominantKeyType === '1key') {
                console.log(`‚ùå Account ${account.username} has ${currentKeys} keys of type ${dominantKeyType}, cannot assign 3key to avoid slot conflict`);
                return false;
              }
              
              // Ch·ªâ cho ph√©p n·∫øu t√†i kho·∫£n ƒë√£ c√≥ key lo·∫°i 3key v√† c√≤n slot
              if (dominantKeyType === '3key' && hasSlots) {
                console.log(`‚úÖ Account ${account.username} has ${currentKeys} keys of type 3key, can accept more 3key`);
                return true;
              }
              
              // N·∫øu kh√¥ng r√µ lo·∫°i key dominant nh∆∞ng ƒë√£ c√≥ key, t·ª´ ch·ªëi ƒë·ªÉ an to√†n
              if (!dominantKeyType) {
                console.log(`‚ùå Account ${account.username} has ${currentKeys} keys but unknown dominant key type, rejecting for safety`);
                return false;
              }
            }
            
            // T√†i kho·∫£n ch∆∞a c√≥ key n√†o (currentKeys === 0), c√≥ th·ªÉ g√°n 3key
            if (currentKeys === 0) {
              console.log(`‚úÖ Account ${account.username} is empty, can accept 3key`);
              return true;
            }
            
            if (!hasSlots) {
              console.log(`‚ùå Account ${account.username} has ${currentKeys}/3 keys, no slots available for 3key`);
            }
            return hasSlots;
            
          } else {
            // Default fallback for unknown key types
            console.log(`‚ö†Ô∏è Unknown key type: ${keyType}, using default logic`);
            const projectedMaxSlots = 3;
            return currentKeys < projectedMaxSlots;
          }
        }).map(account => ({
          ...account,
          // Normalize field names from backend to frontend expected names
          current_key_count: account.key_count || account.current_key_count || 0,
          max_key_slots: account.max_keys || account.max_key_slots || 3,
          
          // Add computed fields for display with projected slots
          projected_max_slots: (() => {
            // Calculate projected max slots based on key type being assigned
            if (keyType === '1key') return 1;
            else if (keyType === '2key') return 2; 
            else if (keyType === '3key') return 3;
            return account.max_keys || account.max_key_slots || 3;
          })(),
          available_slots: (() => {
            const currentKeys = account.key_count || account.current_key_count || 0;
            
            // Calculate available slots based on current account state and key type
            if (keyType === '1key') {
              // 1key: Account should be empty, so available = 1 - currentKeys
              return Math.max(0, 1 - currentKeys);
            } else if (keyType === '2key') {
              // 2key: Check if account is empty or has 1x2key already
              const dominantKeyType = account.dominant_key_type;
              if (currentKeys === 0) {
                // Empty account, can accept 2 keys of 2key type
                return 2;
              } else if (currentKeys === 1 && dominantKeyType === '2key') {
                // Already has 1x2key, can accept 1 more
                return 1;
              } else {
                // Other cases shouldn't appear due to filtering, but handle gracefully
                return 0;
              }
            } else if (keyType === '3key') {
              // 3key: Ch·ªâ cho ph√©p t√†i kho·∫£n tr·ªëng ho·∫∑c ƒë√£ c√≥ key lo·∫°i 3key
              if (currentKeys === 0) {
                // T√†i kho·∫£n tr·ªëng, c√≥ th·ªÉ nh·∫≠n 3 key lo·∫°i 3key
                return 3;
              } else {
                const dominantKeyType = account.dominant_key_type;
                if (dominantKeyType === '3key') {
                  // T√†i kho·∫£n ƒë√£ c√≥ key lo·∫°i 3key, t√≠nh slot c√≤n l·∫°i
                  return Math.max(0, 3 - currentKeys);
                } else {
                  // T√†i kho·∫£n c√≥ key lo·∫°i kh√°c (1key/2key), kh√¥ng th·ªÉ g√°n 3key
                  return 0;
                }
              }
            } else {
              // Default fallback
              const projectedMax = account.max_keys || account.max_key_slots || 3;
              return Math.max(0, projectedMax - currentKeys);
            }
          })(),
          can_accept_key_type: true // Already filtered for compatibility
        }))
        
        console.log(`üîç Filtered accounts for ${keyType} key:`, {
          total: response.data.accounts.length,
          available: accountsWithSlots.length,
          keyType,
          filterLogic: {
            '1key': 'Only empty accounts (0/3 slots)',
            '2key': 'Empty accounts (0/3) or accounts with 1x2key (1/2 slots)', 
            '3key': 'Empty accounts (0/3) or accounts with existing 3key slots (1/3, 2/3) - excludes accounts with 1key/2key to avoid slot conflicts'
          }[keyType] || 'Default logic',
          accountsDetails: accountsWithSlots.map(acc => ({
            id: acc.id,
            username: acc.username,
            original_key_count: acc.key_count, // From backend
            original_max_keys: acc.max_keys, // From backend
            dominant_key_type: acc.dominant_key_type, // From backend
            normalized_current_key_count: acc.current_key_count, // Normalized
            normalized_max_key_slots: acc.max_key_slots, // Normalized
            projected_max_slots: acc.projected_max_slots,
            available_slots: acc.available_slots
          }))
        });
        
        setAccounts(accountsWithSlots)
      } else {
        setAccounts([])
      }
    } catch (error) {
      console.error('Error fetching accounts:', error)
      messageApi.error('L·ªói t·∫£i danh s√°ch t√†i kho·∫£n: ' + (error.message || error))
      setAccounts([])
    } finally {
      setLoadingAccounts(false)
    }
  }

  const handleAssignKey = async () => {
    if (!selectedAccountId || !currentKeyForAssign) {
      messageApi.warning('Vui l√≤ng ch·ªçn t√†i kho·∫£n ƒë·ªÉ g√°n key!')
      return
    }

    try {
      const response = await accountsAPI.assignKey(selectedAccountId, currentKeyForAssign.id)
      
      console.log('üéâ Assign key response:', response);
      
      if (response.success) {
        // Check if backend provided updated account info
        if (response.data && response.data.updatedAccount) {
          console.log('üìä Using backend updated account data:', response.data.updatedAccount);
          
          // Update accounts state with accurate backend data
          const updatedAccounts = accounts.map(account => {
            if (account.id === selectedAccountId) {
              const backendAccount = response.data.updatedAccount;
              const keyType = currentKeyForAssign?.key_type || currentKeyForAssign?.type || '2key';
              const projectedMax = keyType === '1key' ? 1 : keyType === '2key' ? 2 : keyType === '3key' ? 3 : (backendAccount.max_key_slots || 3);
              
              return {
                ...account,
                // Use backend provided values
                current_key_count: backendAccount.current_key_count,
                key_count: backendAccount.current_key_count, // Dual field for compatibility
                max_key_slots: backendAccount.max_key_slots,
                max_keys: backendAccount.max_key_slots, // Dual field for compatibility
                assigned_keys: backendAccount.assigned_keys,
                projected_max_slots: projectedMax,
                available_slots: Math.max(0, projectedMax - backendAccount.current_key_count)
              }
            }
            return account
          });
          
          setAccounts([...updatedAccounts]);
          console.log(`‚úÖ Updated account ${selectedAccountId} with backend data:`, {
            current_key_count: response.data.updatedAccount.current_key_count,
            max_key_slots: response.data.updatedAccount.max_key_slots,
            assigned_keys: response.data.updatedAccount.assigned_keys
          });
        } else {
          console.log('‚ö†Ô∏è No updated account data from backend, using fallback calculation');
          
          // Fallback: C·∫≠p nh·∫≠t local state nh∆∞ tr∆∞·ªõc
          const updatedAccounts = accounts.map(account => {
            if (account.id === selectedAccountId) {
              // Use normalized field names
              const currentKeys = account.current_key_count || account.key_count || 0;
              const newKeyCount = currentKeys + 1;
              const keyType = currentKeyForAssign?.key_type || currentKeyForAssign?.type || '2key';
              const projectedMax = keyType === '1key' ? 1 : keyType === '2key' ? 2 : keyType === '3key' ? 3 : (account.max_key_slots || account.max_keys || 3);
              
              console.log(`üéØ Fallback update for account ${selectedAccountId}: currentKeys=${currentKeys} -> newKeyCount=${newKeyCount}, projectedMax=${projectedMax}`);
              
              return {
                ...account,
                current_key_count: newKeyCount,
                key_count: newKeyCount, // Update both field names for compatibility
                projected_max_slots: projectedMax,
                available_slots: Math.max(0, projectedMax - newKeyCount)
              }
            }
            return account
          })
          
          setAccounts([...updatedAccounts]);
        }
        
        // Force update state v√† table re-render ƒë·ªÉ trigger UI update
        setTableKey(prev => prev + 1) // Force table re-render
        
        // Debug log ƒë·ªÉ ki·ªÉm tra state update
        const currentAccount = accounts.find(acc => acc.id === selectedAccountId);
        console.log(`üéØ Account ${selectedAccountId} update completed:`, {
          oldCount: (currentAccount?.current_key_count || currentAccount?.key_count || 0),
          keyType: currentKeyForAssign?.key_type || currentKeyForAssign?.type || '2key',
          response: response.data
        })
        
        // Hi·ªÉn th·ªã message th√†nh c√¥ng v·ªõi th√¥ng tin slot change
        let successMessage = `ƒê√£ g√°n key ${currentKeyForAssign.code} v√†o t√†i kho·∫£n th√†nh c√¥ng!`;
        if (response.data && response.data.slotChangeMessage) {
          successMessage += ` ${response.data.slotChangeMessage}`;
        }
        messageApi.success(successMessage)
        
        // ƒê√°nh d·∫•u l√† v·ª´a g√°n key th√†nh c√¥ng
        setJustAssignedKey(true)
        
        // Reset selected account ƒë·ªÉ user c√≥ th·ªÉ ch·ªçn t√†i kho·∫£n kh√°c
        setSelectedAccountId(null)
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ database c·∫≠p nh·∫≠t, nh∆∞ng kh√¥ng c·∫ßn qu√° l√¢u v√¨ UI ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        setTimeout(async () => {
          try {
            // Fetch l·∫°i d·ªØ li·ªáu t·ª´ server ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô v·ªõi backend
            await fetchKeys(activeGroup)
            await fetchAllKeys()
            
            // Optionally refresh accounts list ƒë·ªÉ c√≥ d·ªØ li·ªáu ch√≠nh x√°c nh·∫•t t·ª´ server
            // Nh∆∞ng kh√¥ng l√†m gi√°n ƒëo·∫°n UX v√¨ local state ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            await fetchAccountsWithSlots(currentKeyForAssign)
            
            // Force re-render sau khi refresh t·ª´ server
            setTableKey(prev => prev + 1)
            
            console.log('üîÑ Background refresh completed')
          } catch (error) {
            console.error('Background refresh error:', error)
          }
        }, 1000)
        
        // Kh√¥ng ƒë√≥ng modal ƒë·ªÉ user c√≥ th·ªÉ th·∫•y thay ƒë·ªïi v√† ti·∫øp t·ª•c g√°n key kh√°c n·∫øu mu·ªën
        // handleAssignCancel()
      } else {
        // X·ª≠ l√Ω c√°c l·ªói c·ª• th·ªÉ t·ª´ server
        const errorMessage = response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
        messageApi.error(`L·ªói g√°n key: ${errorMessage}`)
      }
    } catch (error) {
      console.error('Assign key error details:', error)
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      
      if (error.message.includes('Key not found or not available for assignment')) {
        errorMessage = `Key ${currentKeyForAssign.code} kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ g√°n. Key ph·∫£i c√≥ tr·∫°ng th√°i "ch·ªù".`
      } else if (error.message.includes('Account not found')) {
        errorMessage = 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i.'
      } else if (error.message.includes('already assigned')) {
        errorMessage = `Key ${currentKeyForAssign.code} ƒë√£ ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n n√†y.`
      } else if (error.message.includes('maximum number of keys')) {
        errorMessage = 'T√†i kho·∫£n ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng key t·ªëi ƒëa.'
      } else if (error.message.includes('maximum number of accounts')) {
        errorMessage = `Key ${currentKeyForAssign.code} ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng t√†i kho·∫£n t·ªëi ƒëa.`
      } else {
        errorMessage = error.message || 'L·ªói g√°n key'
      }
      
      messageApi.error(errorMessage)
    }
  }

  // Functions for transfer key modal
  const showTransferModal = async (key) => {
    // Ch·ªâ cho ph√©p chuy·ªÉn key ƒëang ho·∫°t ƒë·ªông
    if (key.status !== 'ƒëang ho·∫°t ƒë·ªông') {
      messageApi.warning(`Key ${key.code} kh√¥ng th·ªÉ chuy·ªÉn v√¨ ƒëang ·ªü tr·∫°ng th√°i: ${key.status}. Ch·ªâ c√≥ th·ªÉ chuy·ªÉn key c√≥ tr·∫°ng th√°i "ƒëang ho·∫°t ƒë·ªông".`)
      return
    }

    setCurrentKeyForTransfer(key)
    setIsTransferModalOpen(true)
    setSelectedTransferAccountId(null)
    await fetchAccountsForTransfer()
  }

  const handleTransferCancel = () => {
    setIsTransferModalOpen(false)
    setCurrentKeyForTransfer(null)
    setSelectedTransferAccountId(null)
    setTransferAccounts([])
  }

  const fetchAccountsForTransfer = async () => {
    try {
      setLoadingTransferAccounts(true)
      const response = await accountsAPI.getAccounts()
      if (response.success && response.data && Array.isArray(response.data.accounts)) {
        // Filter accounts based on key type and dynamic slot limits
        const keyType = currentKeyForTransfer?.key_type || currentKeyForTransfer?.type || '2key';
        
        const accountsWithSlots = response.data.accounts.filter(account => {
          const currentKeys = account.current_key_count || 0
          const currentMaxSlots = account.max_key_slots || 3
          
          // Calculate what max slots would be after transferring this key type
          let projectedMaxSlots = currentMaxSlots;
          if (keyType === '1key') projectedMaxSlots = 1;
          else if (keyType === '2key') projectedMaxSlots = 2;
          else if (keyType === '3key') projectedMaxSlots = 3;
          
          // Check if account has available slots after the potential slot change
          const wouldHaveSlots = currentKeys < projectedMaxSlots;
          
          // If account has key type restrictions, check compatibility
          if (account.key_type_restrictions) {
            const isCompatible = account.key_type_restrictions === keyType;
            return wouldHaveSlots && isCompatible;
          }
          
          // For accounts without restrictions, they can accept any key type
          return wouldHaveSlots;
        })
        
        console.log(`üîÑ Filtered accounts for transfer ${keyType} key:`, {
          total: response.data.accounts.length,
          available: accountsWithSlots.length,
          keyType
        });
        
        setTransferAccounts(accountsWithSlots)
      } else {
        setTransferAccounts([])
      }
    } catch (error) {
      console.error('Error fetching accounts for transfer:', error)
      messageApi.error('L·ªói t·∫£i danh s√°ch t√†i kho·∫£n: ' + (error.message || error))
      setTransferAccounts([])
    } finally {
      setLoadingTransferAccounts(false)
    }
  }

  const handleTransferKey = async () => {
    if (!selectedTransferAccountId || !currentKeyForTransfer) {
      messageApi.warning('Vui l√≤ng ch·ªçn t√†i kho·∫£n ƒë·ªÉ chuy·ªÉn key!')
      return
    }

    try {
      messageApi.info('ƒêang th·ª±c hi·ªán chuy·ªÉn key...')
      
      // Approach 1: Th·ª≠ t√¨m t√†i kho·∫£n hi·ªán t·∫°i th√¥ng qua vi·ªác l·∫•y danh s√°ch t√†i kho·∫£n v√† check keys
      const allAccountsResponse = await accountsAPI.getAccounts()
      let currentAccountId = null
      
      if (allAccountsResponse.success && allAccountsResponse.data && Array.isArray(allAccountsResponse.data.accounts)) {
        // Th·ª≠ t√¨m t√†i kho·∫£n n√†o c√≥ key n√†y
        for (const account of allAccountsResponse.data.accounts) {
          try {
            const accountKeysResponse = await accountsAPI.getAccountKeys(account.id)
            if (accountKeysResponse.success && accountKeysResponse.data && Array.isArray(accountKeysResponse.data)) {
              const hasKey = accountKeysResponse.data.some(key => key.id === currentKeyForTransfer.id || key.key_id === currentKeyForTransfer.id)
              if (hasKey) {
                currentAccountId = account.id
                console.log(`Found key ${currentKeyForTransfer.id} in account ${account.id} (${account.username})`)
                break
              }
            }
          } catch (error) {
            // B·ªè qua l·ªói v√† ti·∫øp t·ª•c t√¨m
            console.log(`Cannot get keys for account ${account.id}:`, error.message)
          }
        }
      }
      
      if (currentAccountId && currentAccountId !== selectedTransferAccountId) {
        // S·ª≠ d·ª•ng API transferKey v·ªõi t√†i kho·∫£n ngu·ªìn ƒë√£ t√¨m ƒë∆∞·ª£c
        console.log(`Transferring key ${currentKeyForTransfer.id} from account ${currentAccountId} to ${selectedTransferAccountId}`)
        
        try {
          const response = await accountsAPI.transferKey(
            currentKeyForTransfer.id, 
            currentAccountId, 
            selectedTransferAccountId
          )
          
          if (response.success) {
            await fetchKeys(activeGroup)
            await fetchAllKeys()
            messageApi.success(`ƒê√£ chuy·ªÉn key ${currentKeyForTransfer.code} sang t√†i kho·∫£n m·ªõi th√†nh c√¥ng!`)
            handleTransferCancel()
            return
          } else {
            throw new Error(response.message || 'Transfer API failed')
          }
        } catch (transferError) {
          console.log('Transfer API failed, trying unassign/assign approach:', transferError.message)
          
          // Fallback: Th·ª≠ unassign r·ªìi assign
          try {
            // Unassign t·ª´ t√†i kho·∫£n c≈©
            await accountsAPI.unassignKey(currentAccountId, currentKeyForTransfer.id)
            
            // Assign v√†o t√†i kho·∫£n m·ªõi
            const assignResponse = await accountsAPI.assignKey(selectedTransferAccountId, currentKeyForTransfer.id)
            
            if (assignResponse.success) {
              await fetchKeys(activeGroup)
              await fetchAllKeys()
              messageApi.success(`ƒê√£ chuy·ªÉn key ${currentKeyForTransfer.code} sang t√†i kho·∫£n m·ªõi th√†nh c√¥ng!`)
              handleTransferCancel()
              return
            } else {
              throw new Error(assignResponse.message || 'Assign failed after unassign')
            }
          } catch (unassignAssignError) {
            throw new Error(`Kh√¥ng th·ªÉ chuy·ªÉn key: ${unassignAssignError.message}`)
          }
        }
      } else if (currentAccountId === selectedTransferAccountId) {
        messageApi.warning(`Key ${currentKeyForTransfer.code} ƒë√£ thu·ªôc v·ªÅ t√†i kho·∫£n ƒë√≠ch r·ªìi!`)
        handleTransferCancel()
        return
      } else {
        // Kh√¥ng t√¨m ƒë∆∞·ª£c t√†i kho·∫£n hi·ªán t·∫°i, c√≥ th·ªÉ key ch∆∞a ƒë∆∞·ª£c g√°n
        messageApi.warning(`Kh√¥ng t√¨m ƒë∆∞·ª£c t√†i kho·∫£n hi·ªán t·∫°i s·ªü h·ªØu key ${currentKeyForTransfer.code}. Key c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n n√†o.`)
        
        // Th·ª≠ g√°n tr·ª±c ti·∫øp
        try {
          const response = await accountsAPI.assignKey(selectedTransferAccountId, currentKeyForTransfer.id)
          
          if (response.success) {
            await fetchKeys(activeGroup)
            await fetchAllKeys()
            messageApi.success(`ƒê√£ g√°n key ${currentKeyForTransfer.code} v√†o t√†i kho·∫£n th√†nh c√¥ng!`)
            handleTransferCancel()
            return
          } else {
            throw new Error(response.message || 'Direct assign failed')
          }
        } catch (assignError) {
          throw new Error(`Kh√¥ng th·ªÉ g√°n key: ${assignError.message}`)
        }
      }
      
    } catch (error) {
      console.error('Transfer key error details:', error)
      
      // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
      let errorMessage = 'L·ªói kh√¥ng x√°c ƒë·ªãnh'
      
      if (error.message.includes('Key not found or not available for assignment')) {
        errorMessage = `Key ${currentKeyForTransfer.code} kh√¥ng kh·∫£ d·ª•ng ƒë·ªÉ chuy·ªÉn. Key c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n kh√°c ho·∫∑c ƒë√£ h·∫øt h·∫°n.`
      } else if (error.message.includes('Account not found') || error.message.includes('One or both accounts not found')) {
        errorMessage = 'T√†i kho·∫£n ngu·ªìn ho·∫∑c ƒë√≠ch kh√¥ng t·ªìn t·∫°i.'
      } else if (error.message.includes('maximum number of keys')) {
        errorMessage = 'T√†i kho·∫£n ƒë√≠ch ƒë√£ ƒë·∫°t s·ªë l∆∞·ª£ng key t·ªëi ƒëa.'
      } else if (error.message.includes('not currently assigned')) {
        errorMessage = 'Key hi·ªán kh√¥ng ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n ngu·ªìn.'
      } else if (error.message.includes('already assigned')) {
        errorMessage = `Key ${currentKeyForTransfer.code} ƒë√£ ƒë∆∞·ª£c g√°n cho t√†i kho·∫£n n√†y.`
      } else {
        errorMessage = error.message || 'L·ªói chuy·ªÉn key'
      }
      
      messageApi.error(errorMessage)
      handleTransferCancel()
    }
  }

  // Xu·∫•t TXT
  const handleExport = () => {
    const selectedKeys = keys.filter(k => k.selected && k.group === activeGroup)
    if (selectedKeys.length === 0) {
      messageApi.warning('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt key ƒë·ªÉ xu·∫•t!')
      return
    }
    
    const fileName = `${activeGroup}${customDays || days}ngay.txt`
    const linkTemplate = settings.keyExport?.linkTemplate || 'link nh·∫≠p key:'
    const content = selectedKeys.map(k => `${k.code} | ${linkTemplate}`).join('\n')
    const blob = new Blob([content], { type: 'text/plain' })
    const link = document.createElement('a')
    link.href = URL.createObjectURL(blob)
    link.download = fileName
    link.click()
    messageApi.success(`ƒê√£ xu·∫•t ${selectedKeys.length} key v√†o file ${fileName}!`)
  }

  // Map l·∫°i d·ªØ li·ªáu key ƒë·ªÉ kh·ªõp v·ªõi c√°c c·ªôt b·∫£ng
  const mappedKeys = keys.map(k => ({
    ...k,
    group: k.group_code || k.group || activeGroup, // Fallback to activeGroup if no group info
    days: k.days_remaining || k.days_valid || k.days || 0,
    accountCount: k.assigned_accounts ? 
      (typeof k.assigned_accounts === 'string' ? 
        JSON.parse(k.assigned_accounts).length : 
        k.assigned_accounts.length) : 
      (k.current_assignments || 0), // Use current_assignments from query or fallback to 0
    maxKeysPerAccount: k.max_keys_per_account || 2, // New field for display
    customer: k.customer_name || k.customer || '' // Fallback to empty string
  }));

  // T√¨m ki·∫øm
  const filteredKeys = mappedKeys.filter(k => {
    const groupValue = k.group;
    if (groupValue !== activeGroup) return false;
    if (search === '') return true;
    if (['FBX', 'THX', 'CTV', 'TEST'].includes(search.toUpperCase())) return groupValue === search.toUpperCase();
    if (search === 'it') return k.days <= 3;
    return k.code.toLowerCase().includes(search.toLowerCase());
  })

  // Table columns
  const columns = [
    {
      title: <Input type="checkbox" checked={selectAll} onChange={handleSelectAll} />, dataIndex: 'selected', key: 'selected', width: 40,
      render: (_, record) => <Input type="checkbox" checked={record.selected} onChange={() => handleSelect(record.id)} />
    },
    { title: 'M√£ key', dataIndex: 'code', key: 'code', render: v => <span style={{ fontFamily: 'monospace', fontWeight: 600 }}>{v}</span> },
    { title: 'Nh√≥m', dataIndex: 'group', key: 'group' },
    { title: 'Tr·∫°ng th√°i', dataIndex: 'status', key: 'status' },
    { title: 'Ng√†y', dataIndex: 'days', key: 'days' },
    { 
      title: 'Danh s√°ch t√†i kho·∫£n', 
      dataIndex: 'account_details', 
      key: 'account_details',
      width: 200,
      render: (account_details, record) => {
        try {
          let accounts = [];
          
          // First try to use account_details from the new query
          if (account_details && typeof account_details === 'string') {
            accounts = JSON.parse(account_details);
          } else if (Array.isArray(account_details)) {
            accounts = account_details;
          } else if (record.assigned_accounts) {
            // Fallback to assigned_accounts if account_details is not available
            if (typeof record.assigned_accounts === 'string') {
              const assignedIds = JSON.parse(record.assigned_accounts || '[]');
              accounts = assignedIds.map(id => ({ account_id: id, username: `ID: ${id}` }));
            } else if (Array.isArray(record.assigned_accounts)) {
              accounts = record.assigned_accounts.map(id => ({ account_id: id, username: `ID: ${id}` }));
            }
          }
          
          if (accounts.length === 0) {
            return <span className="text-gray-400 italic">Ch∆∞a g√°n</span>;
          }
          
          // Display account usernames (simplified version)
          return (
            <div className="flex flex-wrap gap-1">
              {accounts.map((account, index) => (
                <span 
                  key={index}
                  className={`px-2 py-1 rounded text-xs ${
                    account.status === 'active' 
                      ? 'bg-green-100 text-green-700' 
                      : account.status === 'suspended'
                      ? 'bg-red-100 text-red-700'
                      : 'bg-blue-100 text-blue-700'
                  }`}
                  title={`ID: ${account.account_id} | Tr·∫°ng th√°i: ${account.status || 'unknown'}`}
                >
                  {account.username || `ID: ${account.account_id || account}`}
                </span>
              ))}
            </div>
          );
        } catch (error) {
          console.error('Error parsing account_details:', error);
          return <span className="text-red-400 italic">L·ªói d·ªØ li·ªáu</span>;
        }
      }
    },
    { title: 'Kh√°ch h√†ng', dataIndex: 'customer', key: 'customer' },
    {
      title: 'Thao t√°c', key: 'actions', render: (_, record) => (
        <Space>
          {/* Ch·ªâ hi·ªÉn th·ªã n√∫t g√°n n·∫øu key c√≥ tr·∫°ng th√°i 'ch·ªù' ho·∫∑c c√≥ th·ªÉ g√°n ƒë∆∞·ª£c */}
          {(record.status === 'ch·ªù' || record.status === 'ƒëang ho·∫°t ƒë·ªông') && (
            <Button 
              icon={<RetweetOutlined />} 
              size="small" 
              type="primary"
              onClick={() => showAssignModal(record)}
              title="G√°n key v√†o t√†i kho·∫£n"
              disabled={record.status !== 'ch·ªù'} // Ch·ªâ cho ph√©p g√°n key c√≥ tr·∫°ng th√°i 'ch·ªù'
            >
              G√°n
            </Button>
          )}
          
          {/* N√∫t chuy·ªÉn key - ch·ªâ hi·ªÉn th·ªã v·ªõi key ƒëang ho·∫°t ƒë·ªông */}
          {record.status === 'ƒëang ho·∫°t ƒë·ªông' && (
            <Button 
              icon={<SwapOutlined />} 
              size="small" 
              type="default"
              onClick={() => showTransferModal(record)}
              title="Chuy·ªÉn key sang t√†i kho·∫£n kh√°c"
            >
              Chuy·ªÉn
            </Button>
          )}
          
          <Popconfirm title="X√≥a key n√†y?" onConfirm={() => handleDeleteAccount(record.id)} okText="X√≥a" cancelText="H·ªßy">
            <Button icon={<DeleteOutlined />} size="small" danger title="X√≥a key" />
          </Popconfirm>
        </Space>
      )
    }
  ]

  return (
    <div className="w-full max-w-4xl mx-auto bg-white p-2 sm:p-8 rounded-2xl shadow-md mt-2 sm:mt-6 transition-all">
      <Title level={3} style={{ display: 'flex', alignItems: 'center', gap: 8, fontSize: 20 }}><UnorderedListOutlined /> Key VPN</Title>
      <Divider />
      <Tabs 
        activeKey={activeGroup} 
        onChange={setActiveGroup} 
        type="card" 
        className="mb-4"
        items={keyGroups.map(g => ({
          key: g.value,
          label: g.label,
          children: (
            <>
              <div className="flex flex-col md:flex-row gap-2 md:gap-4 mb-4 w-full">
                <Button type="primary" icon={<PlusOutlined />} onClick={showCreateModal} className="w-full md:w-auto">
                  T·∫°o key {g.label}
                </Button>
                <Button icon={<FileTextOutlined />} onClick={handleExport} className="w-full md:w-auto">Xu·∫•t TXT</Button>
                <Button icon={<DeleteOutlined />} danger onClick={showFilterModal} className="w-full md:w-auto">X√≥a key</Button>
                <Button icon={<ReloadOutlined />} onClick={handleRefresh} className="w-full md:w-auto">L√†m m·ªõi</Button>
              </div>
              <Divider />
              <div className="flex flex-col md:flex-row gap-2 md:gap-4 mb-4 w-full">
                <Input prefix={<SearchOutlined />} placeholder="T√¨m ki·∫øm key, FBX, THX, CTV, TEST, it..." className="w-full md:w-80" value={search} onChange={e => setSearch(e.target.value)} />
                <Button onClick={handleSelectAll} className="w-full md:w-auto">{selectAll ? 'B·ªè ch·ªçn t·∫•t c·∫£' : 'Ch·ªçn t·∫•t c·∫£'}</Button>
              </div>
              <div className="overflow-x-auto rounded-xl shadow-sm">
                <Table
                  columns={columns}
                  dataSource={filteredKeys}
                  rowKey="id"
                  pagination={{ pageSize: 8 }}
                  scroll={{ x: 1000 }}
                  bordered
                  size="middle"
                  style={{ borderRadius: 12, minWidth: 800 }}
                />
              </div>
            </>
          )
        }))}
      />

      {/* Modal t·∫°o key */}
      <Modal
        title={`T·∫°o Key ${activeGroup}`}
        open={isModalOpen}
        onCancel={handleCancel}
        footer={null}
        width={800}
      >
        <Form form={form} layout="vertical" onFinish={handleCreate}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 md:gap-6 mb-4">
            <Form.Item label="Th·ªùi gian key" className="mb-0 md:col-span-2">
              <Space wrap>
                <Radio 
                  checked={activeGroup !== 'TEST' && days === 30} 
                  onChange={() => { setDays(30); setCustomDays('') }} 
                  disabled={activeGroup === 'TEST'}
                >
                  30 ng√†y
                </Radio>
                <Radio 
                  checked={activeGroup !== 'TEST' && days === 15} 
                  onChange={() => { setDays(15); setCustomDays('') }} 
                  disabled={activeGroup === 'TEST'}
                >
                  15 ng√†y
                </Radio>
                <Radio 
                  checked={activeGroup !== 'TEST' && days === 5} 
                  onChange={() => { setDays(5); setCustomDays('') }} 
                  disabled={activeGroup === 'TEST'}
                >
                  5 ng√†y
                </Radio>
                <Input 
                  type="number" 
                  min={1} 
                  style={{ width: 80 }} 
                  placeholder="T√πy ch·ªânh" 
                  value={customDays} 
                  onChange={e => setCustomDays(e.target.value)} 
                  disabled={activeGroup === 'TEST'} 
                />
                {activeGroup === 'TEST' && <span className="text-xs text-gray-500">(2 ng√†y c·ªë ƒë·ªãnh)</span>}
              </Space>
            </Form.Item>
            
            <Form.Item label="Lo·∫°i key" className="mb-0">
              <Select value={type} onChange={v => setType(v)} style={{ width: 160 }}>
                {keyTypeOptions.map(opt => <Option key={opt.value} value={opt.value}>{opt.label}</Option>)}
              </Select>
            </Form.Item>
            
            <Form.Item label="S·ªë l∆∞·ª£ng key" className="mb-0">
              <Input 
                type="number" 
                min={1} 
                className="w-full" 
                value={amount} 
                onChange={e => setAmount(e.target.value)} 
              />
            </Form.Item>
            
            <Form.Item label={<span><UserOutlined /> Th√¥ng tin kh√°ch h√†ng (t√πy ch·ªçn)</span>} className="mb-0 md:col-span-2">
              <Input 
                placeholder="T√™n, link Facebook..." 
                className="w-full" 
                value={customer} 
                onChange={e => setCustomer(e.target.value)} 
              />
            </Form.Item>
          </div>
          
          <div className="flex gap-2 justify-end">
            <Button onClick={handleCancel}>
              H·ªßy
            </Button>
            <Button type="default" icon={<FileTextOutlined />} onClick={handleCreateAndExport}>
              T·∫°o key v√† xu·∫•t TXT
            </Button>
            <Button type="primary" icon={<PlusOutlined />} htmlType="submit">
              T·∫°o key
            </Button>
          </div>
        </Form>
      </Modal>

      {/* Modal l·ªçc x√≥a key */}
      <Modal
        title="L·ªçc v√† X√≥a Key"
        open={isFilterModalOpen}
        onCancel={handleFilterCancel}
        footer={null}
        width={600}
      >
        <div className="space-y-6">
          {/* Ch·ªçn d·∫°ng key */}
          <div>
            <h4 className="text-base font-semibold mb-3">Ch·ªçn d·∫°ng key:</h4>
            <div className="grid grid-cols-2 gap-3">
              {keyGroups.map(group => (
                <Button
                  key={group.value}
                  type={selectedKeyGroup === group.value ? 'primary' : 'default'}
                  onClick={() => handleKeyGroupChange(group.value)}
                  className="h-10"
                >
                  {group.label}
                </Button>
              ))}
            </div>
            {selectedKeyGroup && (
              <p className="text-sm text-gray-500 mt-2">ƒê√£ ch·ªçn: {selectedKeyGroup}</p>
            )}
          </div>

          {/* Ch·ªçn tr·∫°ng th√°i (ch·ªâ hi·ªán khi ƒë√£ ch·ªçn d·∫°ng key) */}
          {selectedKeyGroup && (
            <div>
              <h4 className="text-base font-semibold mb-3">Ch·ªçn tr·∫°ng th√°i:</h4>
              <div className="grid grid-cols-1 gap-3">
                {[
                  { value: 'h·∫øt h·∫°n', label: 'H·∫øt h·∫°n', color: 'red' },
                  { value: 'c√≤n h·∫°n', label: 'C√≤n h·∫°n', color: 'green' },
                  { value: 'ch∆∞a g√°n t√†i kho·∫£n', label: 'Ch∆∞a g√°n t√†i kho·∫£n', color: 'blue' }
                ].map(status => (
                  <Button
                    key={status.value}
                    type={selectedStatus === status.value ? 'primary' : 'default'}
                    onClick={() => handleStatusChange(status.value)}
                    className="h-10 text-left justify-start"
                    style={{
                      borderColor: selectedStatus === status.value ? undefined : status.color,
                      color: selectedStatus === status.value ? undefined : status.color
                    }}
                  >
                    {status.label}
                  </Button>
                ))}
              </div>
              {selectedStatus && (
                <p className="text-sm text-gray-500 mt-2">ƒê√£ ch·ªçn: {selectedStatus}</p>
              )}
            </div>
          )}

          {/* Hi·ªÉn th·ªã danh s√°ch key ƒë∆∞·ª£c l·ªçc */}
          {filteredKeysForDelete.length > 0 && (
            <div>
              <div className="flex justify-between items-center mb-3">
                <h4 className="text-base font-semibold">
                  Danh s√°ch key ({filteredKeysForDelete.length} key):
                </h4>
                <div className="flex gap-2">
                  <Button 
                    size="small" 
                    onClick={handleSelectAllForDelete}
                    type={selectAllForDelete ? 'primary' : 'default'}
                  >
                    {selectAllForDelete ? 'B·ªè ch·ªçn t·∫•t c·∫£' : 'Ch·ªçn t·∫•t c·∫£'}
                  </Button>
                </div>
              </div>
              
              <div className="max-h-60 overflow-y-auto border rounded-lg">
                <Table
                  size="small"
                  pagination={false}
                  rowKey="id"
                  dataSource={filteredKeysForDelete}
                  columns={[
                    {
                      title: (
                        <input
                          type="checkbox"
                          checked={selectAllForDelete}
                          onChange={handleSelectAllForDelete}
                        />
                      ),
                      width: 50,
                      render: (_, record) => (
                        <input
                          type="checkbox"
                          checked={selectedKeysForDelete.some(k => k.id === record.id)}
                          onChange={() => handleSelectKeyForDelete(record.id)}
                        />
                      )
                    },
                    {
                      title: 'M√£ key',
                      dataIndex: 'code',
                      render: (text) => (
                        <span style={{ fontFamily: 'monospace', fontWeight: 600, fontSize: '12px' }}>
                          {text}
                        </span>
                      )
                    },
                    {
                      title: 'Tr·∫°ng th√°i',
                      dataIndex: 'status',
                      render: (status) => (
                        <span className={`px-2 py-1 rounded text-xs ${
                          status === 'h·∫øt h·∫°n' ? 'bg-red-100 text-red-600' :
                          status === 'ƒëang ho·∫°t ƒë·ªông' ? 'bg-green-100 text-green-600' :
                          'bg-blue-100 text-blue-600'
                        }`}>
                          {status}
                        </span>
                      )
                    },
                    {
                      title: 'Ng√†y',
                      dataIndex: 'days',
                      width: 60
                    },
                    {
                      title: 'Kh√°ch h√†ng',
                      dataIndex: 'customer',
                      render: (text) => text || '-'
                    }
                  ]}
                />
              </div>
              
              {selectedKeysForDelete.length > 0 && (
                <p className="text-sm text-blue-600 mt-2">
                  ƒê√£ ch·ªçn {selectedKeysForDelete.length} key ƒë·ªÉ x√≥a
                </p>
              )}
            </div>
          )}

          {/* Th√¥ng tin xem tr∆∞·ªõc */}
          {selectedKeyGroup && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <h5 className="font-semibold mb-2">Xem tr∆∞·ªõc:</h5>
              {filteredKeysForDelete.length > 0 ? (
                <div>
                  <p className="text-sm text-gray-600">
                    {selectedKeysForDelete.length > 0 ? (
                      <>S·∫Ω x√≥a <strong>{selectedKeysForDelete.length}</strong> key ƒë√£ ch·ªçn</>
                    ) : (
                      <>S·∫Ω x√≥a <strong>t·∫•t c·∫£ {filteredKeysForDelete.length}</strong> key <strong>{selectedKeyGroup}</strong> c√≥ tr·∫°ng th√°i <strong>{selectedStatus}</strong></>
                    )}
                  </p>
                </div>
              ) : (
                <p className="text-sm text-gray-600">
                  S·∫Ω x√≥a t·∫•t c·∫£ key <strong>{selectedKeyGroup}</strong>
                  {selectedStatus && (
                    <span> c√≥ tr·∫°ng th√°i <strong>{selectedStatus}</strong></span>
                  )}
                </p>
              )}
              <p className="text-sm text-red-500 mt-2">
                ‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!
              </p>
            </div>
          )}

          {/* Buttons */}
          <div className="flex gap-3 justify-end pt-4 border-t">
            <Button onClick={handleFilterCancel}>
              H·ªßy
            </Button>
            <Button 
              type="primary" 
              danger 
              icon={<DeleteOutlined />}
              onClick={handleFilterDelete}
              disabled={!selectedKeyGroup || (filteredKeysForDelete.length === 0 && selectedKeysForDelete.length === 0)}
            >
              {selectedKeysForDelete.length > 0 
                ? `X√≥a ${selectedKeysForDelete.length} key ƒë√£ ch·ªçn`
                : filteredKeysForDelete.length > 0
                ? `X√≥a t·∫•t c·∫£ ${filteredKeysForDelete.length} key`
                : 'X√≥a key'
              }
            </Button>
          </div>
        </div>
      </Modal>

                  {/* Modal g√°n key v√†o t√†i kho·∫£n */}
      <Modal
        title={`G√°n Key v√†o T√†i kho·∫£n`}
        open={isAssignModalOpen}
        onCancel={handleAssignCancel}
        footer={null}
        width={800}
      >
        <div className="space-y-4">
          {currentKeyForAssign && (
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold mb-2">Th√¥ng tin key:</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div><span className="font-medium">M√£ key:</span> <span className="font-mono font-bold">{currentKeyForAssign.code}</span></div>
                <div><span className="font-medium">Nh√≥m:</span> {currentKeyForAssign.group}</div>
                <div><span className="font-medium">Lo·∫°i key:</span> 
                  <span className="ml-2 px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs font-medium">
                    {currentKeyForAssign.key_type || currentKeyForAssign.type || '2key'}
                  </span>
                </div>
                <div>
                  <span className="font-medium">Tr·∫°ng th√°i:</span> 
                  <span className={`ml-2 px-2 py-1 rounded text-xs ${
                    currentKeyForAssign.status === 'ch·ªù' ? 'bg-blue-100 text-blue-600' :
                    currentKeyForAssign.status === 'ƒëang ho·∫°t ƒë·ªông' ? 'bg-green-100 text-green-600' :
                    currentKeyForAssign.status === 'h·∫øt h·∫°n' ? 'bg-red-100 text-red-600' :
                    'bg-gray-100 text-gray-600'
                  }`}>
                    {currentKeyForAssign.status}
                  </span>
                </div>
                <div><span className="font-medium">S·ªë ng√†y:</span> {currentKeyForAssign.days}</div>
                <div><span className="font-medium">Kh√°ch h√†ng:</span> {currentKeyForAssign.customer || 'Kh√¥ng c√≥'}</div>
              </div>
              
              {/* Th√¥ng b√°o v·ªÅ ·∫£nh h∆∞·ªüng slot */}
              <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                <p className="text-sm text-blue-700">
                  <strong>üí° L∆∞u √Ω:</strong> Key lo·∫°i <strong>{currentKeyForAssign.key_type || currentKeyForAssign.type || '2key'}</strong> s·∫Ω thay ƒë·ªïi slot t√†i kho·∫£n:
                  {(currentKeyForAssign.key_type || currentKeyForAssign.type) === '1key' && (
                    <>
                      <br />‚Ä¢ T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c gi·ªõi h·∫°n <strong>t·ªëi ƒëa 1 slot key</strong>
                      <br />‚Ä¢ N·∫øu t√†i kho·∫£n ƒë√£ c√≥ key kh√°c, key c≈© s·∫Ω b·ªã g·ª° b·ªè
                    </>
                  )}
                  {(currentKeyForAssign.key_type || currentKeyForAssign.type) === '2key' && (
                    <>
                      <br />‚Ä¢ T√†i kho·∫£n s·∫Ω ƒë∆∞·ª£c gi·ªõi h·∫°n <strong>t·ªëi ƒëa 2 slot key</strong>
                      <br />‚Ä¢ Hi·ªÉn th·ªã: s·ªë key ƒë√£ g√°n / 2 (v√≠ d·ª•: 1/2 = ƒë√£ g√°n 1 key, c√≤n 1 slot tr·ªëng)
                    </>
                  )}
                  {(currentKeyForAssign.key_type || currentKeyForAssign.type) === '3key' && (
                    <>
                      <br />‚Ä¢ T√†i kho·∫£n s·∫Ω gi·ªØ nguy√™n <strong>3 slot key</strong>
                      <br />‚Ä¢ Kh√¥ng c√≥ thay ƒë·ªïi v·ªÅ gi·ªõi h·∫°n slot
                    </>
                  )}
                </p>
              </div>
              
              {currentKeyForAssign.status !== 'ch·ªù' && (
                <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
                  <p className="text-sm text-yellow-700">
                    <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> Key n√†y c√≥ tr·∫°ng th√°i "{currentKeyForAssign.status}" v√† c√≥ th·ªÉ kh√¥ng th·ªÉ g√°n ƒë∆∞·ª£c. 
                    Ch·ªâ nh·ªØng key c√≥ tr·∫°ng th√°i "ch·ªù" m·ªõi c√≥ th·ªÉ g√°n v√†o t√†i kho·∫£n.
                  </p>
                </div>
              )}
              
              {justAssignedKey && (
                <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded">
                  <p className="text-sm text-green-700">
                    <strong>‚úÖ Th√†nh c√¥ng!</strong> Key ƒë√£ ƒë∆∞·ª£c g√°n th√†nh c√¥ng. Danh s√°ch t√†i kho·∫£n b√™n d∆∞·ªõi ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi s·ªë l∆∞·ª£ng key m·ªõi nh·∫•t.
                    B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c g√°n key kh√°c ho·∫∑c ƒë√≥ng modal n√†y.
                  </p>
                </div>
              )}
            </div>
          )}

          <div>
            <h4 className="font-semibold mb-3">Ch·ªçn t√†i kho·∫£n c√≥ slot tr·ªëng:</h4>
            {loadingAccounts ? (
              <div className="text-center py-8">
                <Spin size="large" />
                <p className="mt-2 text-gray-500">ƒêang t·∫£i danh s√°ch t√†i kho·∫£n...</p>
              </div>
            ) : accounts.length === 0 ? (
              <Alert
                message="Kh√¥ng c√≥ t√†i kho·∫£n n√†o c√≥ slot tr·ªëng"
                description="T·∫•t c·∫£ t√†i kho·∫£n ƒë√£ ƒë·∫°t s·ªë key t·ªëi ƒëa ho·∫∑c kh√¥ng c√≥ t√†i kho·∫£n n√†o."
                type="info"
                showIcon
              />
            ) : (
              <div className="max-h-96 overflow-y-auto">
                <Table
                  key={tableKey} // Force re-render when tableKey changes
                  size="small"
                  pagination={false}
                  rowKey="id"
                  dataSource={accounts}
                  rowSelection={{
                    type: 'radio',
                    selectedRowKeys: selectedAccountId ? [selectedAccountId] : [],
                    onChange: (selectedRowKeys) => {
                      setSelectedAccountId(selectedRowKeys[0] || null)
                    }
                  }}
                  columns={[
                    {
                      title: 'Username',
                      dataIndex: 'username',
                      render: (text) => (
                        <span className="font-mono font-semibold">{text}</span>
                      )
                    },
                    {
                      title: 'Slot key',
                      render: (_, record) => {
                        // Use projected slots for the key type being assigned
                        const projectedMaxSlots = record.projected_max_slots || 3;
                        const currentKeys = record.current_key_count || 0;
                        const availableSlots = Math.max(0, projectedMaxSlots - currentKeys);
                        const keyTypeRestrictions = record.key_type_restrictions;
                        
                        return (
                          <div className="flex flex-col gap-1">
                            <div className="flex items-center gap-2">
                              <span className={`text-sm font-medium ${
                                availableSlots === 0 ? 'text-red-600 font-bold' :
                                availableSlots === 1 ? 'text-orange-600' :
                                'text-green-600'
                              }`}>
                                {currentKeys}/{projectedMaxSlots}
                              </span>
                              <span className="text-xs text-gray-500">
                                ({availableSlots} tr·ªëng)
                              </span>
                            </div>
                            
                            {/* Show slot change info */}
                            {projectedMaxSlots !== (record.max_key_slots || 3) && (
                              <div className="text-xs">
                                {projectedMaxSlots < (record.max_key_slots || 3) ? (
                                  <span className="bg-yellow-100 text-yellow-700 px-1.5 py-0.5 rounded font-medium">
                                    üìâ Slot s·∫Ω thay ƒë·ªïi: {record.max_key_slots || 3} ‚Üí {projectedMaxSlots}
                                  </span>
                                ) : (
                                  <span className="bg-green-100 text-green-700 px-1.5 py-0.5 rounded font-medium">
                                    üìà Slot s·∫Ω tƒÉng: {record.max_key_slots || 3} ‚Üí {projectedMaxSlots}
                                  </span>
                                )}
                              </div>
                            )}
                            
                            {/* Show when slot remains the same */}
                            {projectedMaxSlots === (record.max_key_slots || 3) && projectedMaxSlots === 3 && (
                              <div className="text-xs">
                                <span className="bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded font-medium">
                                  ‚úÖ Slot gi·ªØ nguy√™n: {projectedMaxSlots}
                                </span>
                              </div>
                            )}
                            
                            {keyTypeRestrictions && keyTypeRestrictions !== '' && (
                              <div className="text-xs">
                                <span className="bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded font-medium">
                                  üîí Ch·ªâ: {keyTypeRestrictions}
                                </span>
                              </div>
                            )}
                            
                            {availableSlots === 1 && (
                              <span className="text-xs text-orange-700 bg-orange-100 px-1.5 py-0.5 rounded font-medium">
                                ‚ö†Ô∏è Slot cu·ªëi c√πng
                              </span>
                            )}
                            
                            {availableSlots === 0 && (
                              <span className="text-xs text-red-700 bg-red-100 px-1.5 py-0.5 rounded font-medium">
                                ‚ùå ƒê√£ ƒë·∫ßy
                              </span>
                            )}
                          </div>
                        );
                      }
                    },
                    {
                      title: 'Tr·∫°ng th√°i',
                      dataIndex: 'status',
                      render: (status) => (
                        <span className={`px-2 py-1 rounded text-xs ${
                          status === 'active' ? 'bg-green-100 text-green-600' :
                          status === 'suspended' ? 'bg-red-100 text-red-600' :
                          'bg-gray-100 text-gray-600'
                        }`}>
                          {status === 'active' ? 'Ho·∫°t ƒë·ªông' : 
                           status === 'suspended' ? 'T·∫°m kh√≥a' : status}
                        </span>
                      )
                    },
                    {
                      title: 'H·∫°n s·ª≠ d·ª•ng',
                      dataIndex: 'expires_at',
                      render: (date) => {
                        if (!date) return '-'
                        const expireDate = new Date(date)
                        const now = new Date()
                        const isExpired = expireDate < now
                        return (
                          <span className={isExpired ? 'text-red-500' : 'text-green-600'}>
                            {expireDate.toLocaleDateString('vi-VN')}
                          </span>
                        )
                      }
                    }
                  ]}
                />
              </div>
            )}
          </div>

          <div className="flex gap-3 justify-end pt-4 border-t">
            <Button onClick={handleAssignCancel}>
              ƒê√≥ng
            </Button>
            <Button 
              onClick={async () => {
                messageApi.info('ƒêang l√†m m·ªõi danh s√°ch t√†i kho·∫£n...')
                await fetchAccountsWithSlots(currentKeyForAssign)
                messageApi.success('ƒê√£ c·∫≠p nh·∫≠t danh s√°ch t√†i kho·∫£n!')
              }}
              disabled={loadingAccounts}
              icon={<ReloadOutlined />}
              loading={loadingAccounts}
            >
              L√†m m·ªõi danh s√°ch
            </Button>
            <Button 
              type="primary"
              onClick={handleAssignKey}
              disabled={!selectedAccountId || loadingAccounts || (currentKeyForAssign && currentKeyForAssign.status !== 'ch·ªù')}
              icon={<RetweetOutlined />}
            >
              {currentKeyForAssign && currentKeyForAssign.status !== 'ch·ªù' 
                ? `Kh√¥ng th·ªÉ g√°n (${currentKeyForAssign.status})`
                : 'G√°n Key v√†o T√†i kho·∫£n'
              }
            </Button>
          </div>
        </div>
      </Modal>

      {/* Modal chuy·ªÉn key sang t√†i kho·∫£n kh√°c */}
      <Modal
        title={`Chuy·ªÉn Key sang T√†i kho·∫£n Kh√°c`}
        open={isTransferModalOpen}
        onCancel={handleTransferCancel}
        footer={null}
        width={800}
      >
        <div className="space-y-4">
          {currentKeyForTransfer && (
            <div className="bg-orange-50 p-4 rounded-lg">
              <h4 className="font-semibold mb-2">Th√¥ng tin key c·∫ßn chuy·ªÉn:</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div><span className="font-medium">M√£ key:</span> <span className="font-mono font-bold">{currentKeyForTransfer.code}</span></div>
                <div><span className="font-medium">Nh√≥m:</span> {currentKeyForTransfer.group}</div>
                <div><span className="font-medium">Lo·∫°i key:</span> 
                  <span className="ml-2 px-2 py-1 bg-purple-100 text-purple-700 rounded text-xs font-medium">
                    {currentKeyForTransfer.key_type || currentKeyForTransfer.type || '2key'}
                  </span>
                </div>
                <div>
                  <span className="font-medium">Tr·∫°ng th√°i:</span> 
                  <span className={`ml-2 px-2 py-1 rounded text-xs ${
                    currentKeyForTransfer.status === 'ch·ªù' ? 'bg-blue-100 text-blue-600' :
                    currentKeyForTransfer.status === 'ƒëang ho·∫°t ƒë·ªông' ? 'bg-green-100 text-green-600' :
                    currentKeyForTransfer.status === 'h·∫øt h·∫°n' ? 'bg-red-100 text-red-600' :
                    'bg-gray-100 text-gray-600'
                  }`}>
                    {currentKeyForTransfer.status}
                  </span>
                </div>
                <div><span className="font-medium">S·ªë ng√†y:</span> {currentKeyForTransfer.days}</div>
                <div><span className="font-medium">Kh√°ch h√†ng:</span> {currentKeyForTransfer.customer || 'Kh√¥ng c√≥'}</div>
              </div>
              
              <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                <p className="text-sm text-blue-700">
                  <strong>üí° L∆∞u √Ω:</strong> Key n√†y s·∫Ω ƒë∆∞·ª£c chuy·ªÉn t·ª´ t√†i kho·∫£n hi·ªán t·∫°i sang t√†i kho·∫£n m·ªõi m√† b·∫°n ch·ªçn.
                  T√†i kho·∫£n c≈© s·∫Ω m·∫•t quy·ªÅn s·ª≠ d·ª•ng key n√†y.
                </p>
              </div>
            </div>
          )}

          <div>
            <h4 className="font-semibold mb-3">Ch·ªçn t√†i kho·∫£n ƒë√≠ch c√≥ slot tr·ªëng:</h4>
            {loadingTransferAccounts ? (
              <div className="text-center py-8">
                <Spin size="large" />
                <p className="mt-2 text-gray-500">ƒêang t·∫£i danh s√°ch t√†i kho·∫£n...</p>
              </div>
            ) : transferAccounts.length === 0 ? (
              <Alert
                message="Kh√¥ng c√≥ t√†i kho·∫£n n√†o c√≥ slot tr·ªëng"
                description="T·∫•t c·∫£ t√†i kho·∫£n ƒë√£ ƒë·∫°t s·ªë key t·ªëi ƒëa ho·∫∑c kh√¥ng c√≥ t√†i kho·∫£n n√†o."
                type="info"
                showIcon
              />
            ) : (
              <div className="max-h-96 overflow-y-auto">
                <Table
                  size="small"
                  pagination={false}
                  rowKey="id"
                  dataSource={transferAccounts}
                  rowSelection={{
                    type: 'radio',
                    selectedRowKeys: selectedTransferAccountId ? [selectedTransferAccountId] : [],
                    onChange: (selectedRowKeys) => {
                      setSelectedTransferAccountId(selectedRowKeys[0] || null)
                    }
                  }}
                  columns={[
                    {
                      title: 'Username',
                      dataIndex: 'username',
                      render: (text) => (
                        <span className="font-mono font-semibold">{text}</span>
                      )
                    },
                    {
                      title: 'Slot key',
                      render: (_, record) => {
                        const current = record.current_key_count || 0;
                        const currentMax = record.max_key_slots || 3;
                        
                        // Calculate what the max slots would be after transferring this key
                        const keyType = currentKeyForTransfer?.key_type || currentKeyForTransfer?.type || '2key';
                        let projectedMax = currentMax;
                        if (keyType === '1key') projectedMax = 1;
                        else if (keyType === '2key') projectedMax = 2;
                        else if (keyType === '3key') projectedMax = 3;
                        
                        // Check if account would be full after transfer
                        const wouldBeFull = (current + 1) >= projectedMax;
                        const isIncompatible = record.key_type_restrictions && record.key_type_restrictions !== keyType;
                        
                        return (
                          <div className="flex flex-col gap-1">
                            <div className="flex items-center gap-2">
                              <span className={`text-sm ${
                                current >= currentMax ? 'text-red-600 font-bold' :
                                current > currentMax * 0.7 ? 'text-orange-600' :
                                'text-gray-600'
                              }`}>
                                {current}/{currentMax}
                              </span>
                              {record.key_type_restrictions && (
                                <span className="text-xs bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded font-medium">
                                  üîí {record.key_type_restrictions}
                                </span>
                              )}
                            </div>
                            
                            {/* Show projected slots after transfer */}
                            {projectedMax !== currentMax && (
                              <div className="text-xs">
                                {projectedMax < currentMax ? (
                                  <span className="bg-yellow-100 text-yellow-700 px-1.5 py-0.5 rounded font-medium">
                                    üìâ Sau chuy·ªÉn: {current + 1}/{projectedMax} (slot: {currentMax} ‚Üí {projectedMax})
                                  </span>
                                ) : (
                                  <span className="bg-green-100 text-green-700 px-1.5 py-0.5 rounded font-medium">
                                    üìà Sau chuy·ªÉn: {current + 1}/{projectedMax} (slot: {currentMax} ‚Üí {projectedMax})
                                  </span>
                                )}
                              </div>
                            )}
                            
                            {projectedMax === currentMax && (
                              <div className="text-xs">
                                <span className="bg-blue-100 text-blue-700 px-1.5 py-0.5 rounded font-medium">
                                  ‚Üí Sau chuy·ªÉn: {current + 1}/{projectedMax}
                                </span>
                              </div>
                            )}
                            
                            {isIncompatible && (
                              <span className="text-xs text-red-700 bg-red-100 px-1.5 py-0.5 rounded font-medium">
                                ‚ö†Ô∏è Kh√¥ng t∆∞∆°ng th√≠ch
                              </span>
                            )}
                            
                            {wouldBeFull && (
                              <span className="text-xs text-orange-700 bg-orange-100 px-1.5 py-0.5 rounded font-medium">
                                ‚ö†Ô∏è S·∫Ω ƒë·∫ßy sau chuy·ªÉn
                              </span>
                            )}
                          </div>
                        );
                      }
                    },
                    {
                      title: 'Tr·∫°ng th√°i',
                      dataIndex: 'status',
                      render: (status) => (
                        <span className={`px-2 py-1 rounded text-xs ${
                          status === 'active' ? 'bg-green-100 text-green-600' :
                          status === 'suspended' ? 'bg-red-100 text-red-600' :
                          'bg-gray-100 text-gray-600'
                        }`}>
                          {status === 'active' ? 'Ho·∫°t ƒë·ªông' : 
                           status === 'suspended' ? 'T·∫°m kh√≥a' : status}
                        </span>
                      )
                    },
                    {
                      title: 'H·∫°n s·ª≠ d·ª•ng',
                      dataIndex: 'expires_at',
                      render: (date) => {
                        if (!date) return '-'
                        const expireDate = new Date(date)
                        const now = new Date()
                        const isExpired = expireDate < now
                        return (
                          <span className={isExpired ? 'text-red-500' : 'text-green-600'}>
                            {expireDate.toLocaleDateString('vi-VN')}
                          </span>
                        )
                      }
                    }
                  ]}
                />
              </div>
            )}
          </div>

          <div className="flex gap-3 justify-end pt-4 border-t">
            <Button onClick={handleTransferCancel}>
              H·ªßy
            </Button>
            <Button 
              type="primary"
              onClick={handleTransferKey}
              disabled={!selectedTransferAccountId || loadingTransferAccounts}
              icon={<SwapOutlined />}
              style={{ backgroundColor: '#f59e0b', borderColor: '#f59e0b' }}
            >
              Chuy·ªÉn Key sang T√†i kho·∫£n ƒê√≠ch
            </Button>
          </div>
        </div>
      </Modal>
    </div>
  )
}

export default CreateKey 